name: 'CI-Pocketknife visual regression action'
description: 'It allows running visual regression tests as actions'
runs:
  using: "composite"
  steps:

    - name: Create cache folder
      shell: bash
      run: |
        mkdir -p /tmp/docker-cache

    - name: Cache ci-pocketknife docker image
      uses: actions/cache@v3
      with:
        path: /tmp/docker-cache
        key: ci-pocketknife-installer-${{ hashFiles('**/installer.sh') }}

    - name: Read dotenv defaults file for visual regression tests
      shell: bash
      run: |
        grep -v '^#' ${{ github.action_path }}/defaults.env.visreg | grep . >> $GITHUB_ENV

    - name: Read dotenv file for visual regression tests
      shell: bash
      run: |
        grep -v '^#' .env.visreg | grep . >> $GITHUB_ENV

    - name: Validate environment variables
      shell: bash
      run: |
        [[ "${{ env.CI_VR_REFERENCE_WEBSITE_URL }}" ]] || { echo "CI_VR_REFERENCE_WEBSITE_URL input is required" ; exit 1; }
        [[ "${{ env.CI_VR_TEST_WEBSITE_URL }}" ]] || { echo "CI_VR_TEST_WEBSITE_URL input is required" ; exit 1; }

    - name: Massage environment variables
      shell: bash
      run: |
        echo "CI_VR_URL_LIST_LIMIT=${{ env.CI_VR_URL_LIST_LIMIT > 0 && '--limit ' || '' }}${{ env.CI_VR_URL_LIST_LIMIT > 0 && env.CI_VR_URL_LIST_LIMIT || '' }}" >> $GITHUB_ENV && \
        echo "CI_VR_URL_LIST_RANDOMIZE=${{ env.CI_VR_URL_LIST_RANDOMIZE && env.CI_VR_URL_LIST_RANDOMIZE != 'false' && '--random' || '' }}" >> $GITHUB_ENV

    - name: Install automated testing tools
      shell: bash
      run: |
        cd app/vendor/iqual-ch/ci-pocketknife-installer/ && \
        source installer.sh && \
        echo "$CI_VR_WORKING_FOLDER/bin" >> $GITHUB_PATH

    - name: Collect internal URLs starting from the homepage
      shell: bash
      run: |
        g glue:lynx-crawl $CI_VR_REFERENCE_WEBSITE_URL $CI_VR_URL_LIST_LIMIT $CI_VR_URL_LIST_RANDOMIZE > $CI_VR_WORKING_FOLDER/crawled_urls_reference.csv && \
        cat $CI_VR_WORKING_FOLDER/crawled_urls_reference.csv

    - name: Dynamic configuration for BackstopJS
      shell: bash
      run: |
        g glue:backstop:config --uris='/app/data/crawled_urls_reference.csv' --url=$CI_VR_TEST_WEBSITE_URL --referenceUrl=$CI_VR_REFERENCE_WEBSITE_URL > $CI_VR_WORKING_FOLDER/backstop_config.json  && \
        cat $CI_VR_WORKING_FOLDER/backstop_config.json

    - name: Cache warming
      shell: bash
      run: |
        cat $CI_VR_WORKING_FOLDER/crawled_urls_reference.csv | while read url; do \
          time curl -A 'Cache Warmer' -s -L $CI_VR_REFERENCE_WEBSITE_URL${url} >/dev/null 2>&1; \
          time curl -A 'Cache Warmer' -s -L $CI_VR_TEST_WEBSITE_URL${url} >/dev/null 2>&1; \
          echo $CI_VR_REFERENCE_WEBSITE_URL${url}; \
          echo $CI_VR_TEST_WEBSITE_URL${url}; \
        done

    - name: Generate references for BackstopJS
      shell: bash
      run: |
        g glue:backstop:reference --config '/app/data/backstop_config.json'

    - name: Run tests for BackstopJS
      shell: bash
      run: |
        g glue:backstop:test --config '/app/data/backstop_config.json'

    - name: Generate PDF and HTML reports
      if: always()
      shell: bash
      run: |
        g glue:pdf-report

    - name: Upload PDF report
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: backstopjs-report
        path: ${{ env.CI_VR_WORKING_FOLDER }}/report.pdf

    - name: Upload HTML report
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: backstopjs-report
        path: ${{ env.CI_VR_WORKING_FOLDER }}/backstop_data
